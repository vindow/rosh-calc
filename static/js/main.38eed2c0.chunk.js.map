{"version":3,"sources":["calculator/calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","target","id","time","value","replace","deathTime","parseInt","setState","killTime","hero","heroWithAegis","handleSubmit","preventDefault","newExpTime","createTimeString","state","newRespawnMinTime","newRespawnMaxTime","expireTime","respawnMinTime","respawnMaxTime","submitted","num","stringNum","toString","slice","length","bind","assertThisInitialized","textToCopy","react_default","a","createElement","className","onSubmit","type","name","placeholder","onChange","pattern","required","react_clipboard_default","style","background-color","color","border-radius","border","padding","margin","vertical-align","data-clipboard-text","React","Component","App","calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38eed2c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Clipboard from 'react-clipboard.js';\r\nimport \"./calculator.css\";\r\n\r\nexport default class Calculator extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            killTime: 0,\r\n            expireTime: \"\",\r\n            respawnMinTime: \"\",\r\n            respawnMaxTime: \"\",\r\n            heroWithAegis: \"\",\r\n            submitted : false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        if (e.target.id === \"time\") {\r\n            let time = e.target.value.replace(':', \"\");\r\n            let deathTime = parseInt(time, 10);\r\n            this.setState({killTime: deathTime});\r\n        } else {\r\n            let hero = e.target.value;\r\n            this.setState({heroWithAegis: hero});\r\n        }\r\n        \r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let newExpTime = this.createTimeString(this.state.killTime + 500)\r\n        let newRespawnMinTime = this.createTimeString(this.state.killTime + 800);\r\n        let newRespawnMaxTime = this.createTimeString(this.state.killTime + 1100);\r\n        this.setState({\r\n            expireTime: newExpTime,\r\n            respawnMinTime: newRespawnMinTime,\r\n            respawnMaxTime: newRespawnMaxTime,\r\n            submitted: true\r\n        });\r\n    }\r\n\r\n    createTimeString = (num) => {\r\n        let stringNum = num.toString();\r\n        return stringNum.slice(0, stringNum.length - 2) + \":\" + stringNum.slice(stringNum.length - 2);\r\n    }\r\n\r\n    render() {\r\n        const submitted = this.state.submitted;\r\n        const textToCopy = this.state.heroWithAegis + \" Aegis expires at \" + this.state.expireTime + \". Roshan respawns between \" + this.state.respawnMinTime + \" and \" + this.state.respawnMaxTime + \".\";\r\n        const copyStyle = {\r\n            \"background-color\" : \"#28a745\",\r\n            \"color\" : \"#FFFFFF\",\r\n            \"border-radius\" : \"0.25em\",\r\n            \"border\" : \"1px lightgray solid\",\r\n            \"padding\" : \"0.375rem 0.75rem\",\r\n            \"margin\" : \"0 0.5em\",\r\n            \"vertical-align\" : \"top\"\r\n        }\r\n        return(\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <input \r\n                            type=\"text\" \r\n                            id=\"time\" \r\n                            name=\"time\" \r\n                            className=\"form-control\"\r\n                            placeholder=\"Roshan kill time (XX:XX or XXXX only)\" \r\n                            onChange={this.handleChange} \r\n                            pattern=\"\\d+:?\\d{2}\" \r\n                            required \r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input \r\n                            type=\"text\" \r\n                            id=\"pickedBy\" \r\n                            name=\"pickedBy\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Aegis picked up by (Optional)\" \r\n                            onChange={this.handleChange} \r\n                        />\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-primary\" value=\"Submit\"></input>\r\n                </form>\r\n                {submitted ? (\r\n                    <div id=\"copyLine\">\r\n                        <span id=\"textToCopy\">{textToCopy}</span>\r\n                        <Clipboard style={copyStyle} data-clipboard-text={textToCopy}>Copy</Clipboard>\r\n                    </div>\r\n                ) : (\r\n                    <span></span>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport Calculator from './calculator/calculator';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Roshan Calculator</h1>\n        <Calculator></Calculator>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}